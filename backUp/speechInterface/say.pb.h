// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: say.proto

#ifndef PROTOBUF_say_2eproto__INCLUDED
#define PROTOBUF_say_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace say {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_say_2eproto();
void protobuf_AssignDesc_say_2eproto();
void protobuf_ShutdownFile_say_2eproto();

class AsrSpeech;
class Speech;
class Text;

// ===================================================================

class Text : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:say.Text) */ {
 public:
  Text();
  virtual ~Text();

  Text(const Text& from);

  inline Text& operator=(const Text& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Text& default_instance();

  void Swap(Text* other);

  // implements Message ----------------------------------------------

  inline Text* New() const { return New(NULL); }

  Text* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Text& from);
  void MergeFrom(const Text& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Text* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string text = 1;
  void clear_text();
  static const int kTextFieldNumber = 1;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // optional string voiceName = 2;
  void clear_voicename();
  static const int kVoiceNameFieldNumber = 2;
  const ::std::string& voicename() const;
  void set_voicename(const ::std::string& value);
  void set_voicename(const char* value);
  void set_voicename(const char* value, size_t size);
  ::std::string* mutable_voicename();
  ::std::string* release_voicename();
  void set_allocated_voicename(::std::string* voicename);

  // @@protoc_insertion_point(class_scope:say.Text)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  ::google::protobuf::internal::ArenaStringPtr voicename_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_say_2eproto();
  friend void protobuf_AssignDesc_say_2eproto();
  friend void protobuf_ShutdownFile_say_2eproto();

  void InitAsDefaultInstance();
  static Text* default_instance_;
};
// -------------------------------------------------------------------

class Speech : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:say.Speech) */ {
 public:
  Speech();
  virtual ~Speech();

  Speech(const Speech& from);

  inline Speech& operator=(const Speech& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Speech& default_instance();

  void Swap(Speech* other);

  // implements Message ----------------------------------------------

  inline Speech* New() const { return New(NULL); }

  Speech* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Speech& from);
  void MergeFrom(const Speech& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Speech* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes audio = 1;
  void clear_audio();
  static const int kAudioFieldNumber = 1;
  const ::std::string& audio() const;
  void set_audio(const ::std::string& value);
  void set_audio(const char* value);
  void set_audio(const void* value, size_t size);
  ::std::string* mutable_audio();
  ::std::string* release_audio();
  void set_allocated_audio(::std::string* audio);

  // @@protoc_insertion_point(class_scope:say.Speech)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr audio_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_say_2eproto();
  friend void protobuf_AssignDesc_say_2eproto();
  friend void protobuf_ShutdownFile_say_2eproto();

  void InitAsDefaultInstance();
  static Speech* default_instance_;
};
// -------------------------------------------------------------------

class AsrSpeech : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:say.AsrSpeech) */ {
 public:
  AsrSpeech();
  virtual ~AsrSpeech();

  AsrSpeech(const AsrSpeech& from);

  inline AsrSpeech& operator=(const AsrSpeech& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AsrSpeech& default_instance();

  void Swap(AsrSpeech* other);

  // implements Message ----------------------------------------------

  inline AsrSpeech* New() const { return New(NULL); }

  AsrSpeech* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AsrSpeech& from);
  void MergeFrom(const AsrSpeech& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AsrSpeech* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes audio = 1;
  void clear_audio();
  static const int kAudioFieldNumber = 1;
  const ::std::string& audio() const;
  void set_audio(const ::std::string& value);
  void set_audio(const char* value);
  void set_audio(const void* value, size_t size);
  ::std::string* mutable_audio();
  ::std::string* release_audio();
  void set_allocated_audio(::std::string* audio);

  // optional string model = 2;
  void clear_model();
  static const int kModelFieldNumber = 2;
  const ::std::string& model() const;
  void set_model(const ::std::string& value);
  void set_model(const char* value);
  void set_model(const char* value, size_t size);
  ::std::string* mutable_model();
  ::std::string* release_model();
  void set_allocated_model(::std::string* model);

  // @@protoc_insertion_point(class_scope:say.AsrSpeech)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr audio_;
  ::google::protobuf::internal::ArenaStringPtr model_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_say_2eproto();
  friend void protobuf_AssignDesc_say_2eproto();
  friend void protobuf_ShutdownFile_say_2eproto();

  void InitAsDefaultInstance();
  static AsrSpeech* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Text

// optional string text = 1;
inline void Text::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Text::text() const {
  // @@protoc_insertion_point(field_get:say.Text.text)
  return text_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Text::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:say.Text.text)
}
inline void Text::set_text(const char* value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:say.Text.text)
}
inline void Text::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:say.Text.text)
}
inline ::std::string* Text::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:say.Text.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Text::release_text() {
  // @@protoc_insertion_point(field_release:say.Text.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Text::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:say.Text.text)
}

// optional string voiceName = 2;
inline void Text::clear_voicename() {
  voicename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Text::voicename() const {
  // @@protoc_insertion_point(field_get:say.Text.voiceName)
  return voicename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Text::set_voicename(const ::std::string& value) {
  
  voicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:say.Text.voiceName)
}
inline void Text::set_voicename(const char* value) {
  
  voicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:say.Text.voiceName)
}
inline void Text::set_voicename(const char* value, size_t size) {
  
  voicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:say.Text.voiceName)
}
inline ::std::string* Text::mutable_voicename() {
  
  // @@protoc_insertion_point(field_mutable:say.Text.voiceName)
  return voicename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Text::release_voicename() {
  // @@protoc_insertion_point(field_release:say.Text.voiceName)
  
  return voicename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Text::set_allocated_voicename(::std::string* voicename) {
  if (voicename != NULL) {
    
  } else {
    
  }
  voicename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), voicename);
  // @@protoc_insertion_point(field_set_allocated:say.Text.voiceName)
}

// -------------------------------------------------------------------

// Speech

// optional bytes audio = 1;
inline void Speech::clear_audio() {
  audio_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Speech::audio() const {
  // @@protoc_insertion_point(field_get:say.Speech.audio)
  return audio_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Speech::set_audio(const ::std::string& value) {
  
  audio_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:say.Speech.audio)
}
inline void Speech::set_audio(const char* value) {
  
  audio_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:say.Speech.audio)
}
inline void Speech::set_audio(const void* value, size_t size) {
  
  audio_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:say.Speech.audio)
}
inline ::std::string* Speech::mutable_audio() {
  
  // @@protoc_insertion_point(field_mutable:say.Speech.audio)
  return audio_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Speech::release_audio() {
  // @@protoc_insertion_point(field_release:say.Speech.audio)
  
  return audio_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Speech::set_allocated_audio(::std::string* audio) {
  if (audio != NULL) {
    
  } else {
    
  }
  audio_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), audio);
  // @@protoc_insertion_point(field_set_allocated:say.Speech.audio)
}

// -------------------------------------------------------------------

// AsrSpeech

// optional bytes audio = 1;
inline void AsrSpeech::clear_audio() {
  audio_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AsrSpeech::audio() const {
  // @@protoc_insertion_point(field_get:say.AsrSpeech.audio)
  return audio_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AsrSpeech::set_audio(const ::std::string& value) {
  
  audio_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:say.AsrSpeech.audio)
}
inline void AsrSpeech::set_audio(const char* value) {
  
  audio_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:say.AsrSpeech.audio)
}
inline void AsrSpeech::set_audio(const void* value, size_t size) {
  
  audio_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:say.AsrSpeech.audio)
}
inline ::std::string* AsrSpeech::mutable_audio() {
  
  // @@protoc_insertion_point(field_mutable:say.AsrSpeech.audio)
  return audio_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AsrSpeech::release_audio() {
  // @@protoc_insertion_point(field_release:say.AsrSpeech.audio)
  
  return audio_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AsrSpeech::set_allocated_audio(::std::string* audio) {
  if (audio != NULL) {
    
  } else {
    
  }
  audio_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), audio);
  // @@protoc_insertion_point(field_set_allocated:say.AsrSpeech.audio)
}

// optional string model = 2;
inline void AsrSpeech::clear_model() {
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AsrSpeech::model() const {
  // @@protoc_insertion_point(field_get:say.AsrSpeech.model)
  return model_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AsrSpeech::set_model(const ::std::string& value) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:say.AsrSpeech.model)
}
inline void AsrSpeech::set_model(const char* value) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:say.AsrSpeech.model)
}
inline void AsrSpeech::set_model(const char* value, size_t size) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:say.AsrSpeech.model)
}
inline ::std::string* AsrSpeech::mutable_model() {
  
  // @@protoc_insertion_point(field_mutable:say.AsrSpeech.model)
  return model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AsrSpeech::release_model() {
  // @@protoc_insertion_point(field_release:say.AsrSpeech.model)
  
  return model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AsrSpeech::set_allocated_model(::std::string* model) {
  if (model != NULL) {
    
  } else {
    
  }
  model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model);
  // @@protoc_insertion_point(field_set_allocated:say.AsrSpeech.model)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace say

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_say_2eproto__INCLUDED
