// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: say.proto

#include "say.pb.h"
#include "say.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace say {

static const char* TextToSpeech_method_names[] = {
  "/say.TextToSpeech/Say",
  "/say.TextToSpeech/Asr",
  "/say.TextToSpeech/BiAsr",
};

std::unique_ptr< TextToSpeech::Stub> TextToSpeech::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< TextToSpeech::Stub> stub(new TextToSpeech::Stub(channel));
  return stub;
}

TextToSpeech::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Say_(TextToSpeech_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Asr_(TextToSpeech_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BiAsr_(TextToSpeech_method_names[2], ::grpc::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::Status TextToSpeech::Stub::Say(::grpc::ClientContext* context, const ::say::Text& request, ::say::Speech* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Say_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::say::Speech>* TextToSpeech::Stub::AsyncSayRaw(::grpc::ClientContext* context, const ::say::Text& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::say::Speech>(channel_.get(), cq, rpcmethod_Say_, context, request);
}

::grpc::Status TextToSpeech::Stub::Asr(::grpc::ClientContext* context, const ::say::AsrSpeech& request, ::say::Speech* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Asr_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::say::Speech>* TextToSpeech::Stub::AsyncAsrRaw(::grpc::ClientContext* context, const ::say::AsrSpeech& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::say::Speech>(channel_.get(), cq, rpcmethod_Asr_, context, request);
}

::grpc::ClientReaderWriter< ::say::Speech, ::say::Speech>* TextToSpeech::Stub::BiAsrRaw(::grpc::ClientContext* context) {
  return new ::grpc::ClientReaderWriter< ::say::Speech, ::say::Speech>(channel_.get(), rpcmethod_BiAsr_, context);
}

::grpc::ClientAsyncReaderWriter< ::say::Speech, ::say::Speech>* TextToSpeech::Stub::AsyncBiAsrRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncReaderWriter< ::say::Speech, ::say::Speech>(channel_.get(), cq, rpcmethod_BiAsr_, context, tag);
}

TextToSpeech::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      TextToSpeech_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< TextToSpeech::Service, ::say::Text, ::say::Speech>(
          std::mem_fn(&TextToSpeech::Service::Say), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      TextToSpeech_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< TextToSpeech::Service, ::say::AsrSpeech, ::say::Speech>(
          std::mem_fn(&TextToSpeech::Service::Asr), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      TextToSpeech_method_names[2],
      ::grpc::RpcMethod::BIDI_STREAMING,
      new ::grpc::BidiStreamingHandler< TextToSpeech::Service, ::say::Speech, ::say::Speech>(
          std::mem_fn(&TextToSpeech::Service::BiAsr), this)));
}

TextToSpeech::Service::~Service() {
}

::grpc::Status TextToSpeech::Service::Say(::grpc::ServerContext* context, const ::say::Text* request, ::say::Speech* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TextToSpeech::Service::Asr(::grpc::ServerContext* context, const ::say::AsrSpeech* request, ::say::Speech* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TextToSpeech::Service::BiAsr(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::say::Speech, ::say::Speech>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace say

