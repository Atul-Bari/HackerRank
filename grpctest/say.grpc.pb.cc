// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: say.proto

#include "say.pb.h"
#include "say.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace say {

static const char* TextToSpeech_method_names[] = {
  "/say.TextToSpeech/Say",
  "/say.TextToSpeech/Asr",
  "/say.TextToSpeech/BiAsr",
};

std::unique_ptr< TextToSpeech::Stub> TextToSpeech::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< TextToSpeech::Stub> stub(new TextToSpeech::Stub(channel));
  return stub;
}

TextToSpeech::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Say_(TextToSpeech_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Asr_(TextToSpeech_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BiAsr_(TextToSpeech_method_names[2], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::Status TextToSpeech::Stub::Say(::grpc::ClientContext* context, const ::say::Text& request, ::say::Speech* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Say_, context, request, response);
}

void TextToSpeech::Stub::experimental_async::Say(::grpc::ClientContext* context, const ::say::Text* request, ::say::Speech* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Say_, context, request, response, std::move(f));
}

void TextToSpeech::Stub::experimental_async::Say(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::say::Speech* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Say_, context, request, response, std::move(f));
}

void TextToSpeech::Stub::experimental_async::Say(::grpc::ClientContext* context, const ::say::Text* request, ::say::Speech* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Say_, context, request, response, reactor);
}

void TextToSpeech::Stub::experimental_async::Say(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::say::Speech* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Say_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::say::Speech>* TextToSpeech::Stub::AsyncSayRaw(::grpc::ClientContext* context, const ::say::Text& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::say::Speech>::Create(channel_.get(), cq, rpcmethod_Say_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::say::Speech>* TextToSpeech::Stub::PrepareAsyncSayRaw(::grpc::ClientContext* context, const ::say::Text& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::say::Speech>::Create(channel_.get(), cq, rpcmethod_Say_, context, request, false);
}

::grpc::Status TextToSpeech::Stub::Asr(::grpc::ClientContext* context, const ::say::AsrSpeech& request, ::say::Speech* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Asr_, context, request, response);
}

void TextToSpeech::Stub::experimental_async::Asr(::grpc::ClientContext* context, const ::say::AsrSpeech* request, ::say::Speech* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Asr_, context, request, response, std::move(f));
}

void TextToSpeech::Stub::experimental_async::Asr(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::say::Speech* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Asr_, context, request, response, std::move(f));
}

void TextToSpeech::Stub::experimental_async::Asr(::grpc::ClientContext* context, const ::say::AsrSpeech* request, ::say::Speech* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Asr_, context, request, response, reactor);
}

void TextToSpeech::Stub::experimental_async::Asr(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::say::Speech* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Asr_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::say::Speech>* TextToSpeech::Stub::AsyncAsrRaw(::grpc::ClientContext* context, const ::say::AsrSpeech& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::say::Speech>::Create(channel_.get(), cq, rpcmethod_Asr_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::say::Speech>* TextToSpeech::Stub::PrepareAsyncAsrRaw(::grpc::ClientContext* context, const ::say::AsrSpeech& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::say::Speech>::Create(channel_.get(), cq, rpcmethod_Asr_, context, request, false);
}

::grpc::ClientReaderWriter< ::say::Speech, ::say::Speech>* TextToSpeech::Stub::BiAsrRaw(::grpc::ClientContext* context) {
  return ::grpc_impl::internal::ClientReaderWriterFactory< ::say::Speech, ::say::Speech>::Create(channel_.get(), rpcmethod_BiAsr_, context);
}

void TextToSpeech::Stub::experimental_async::BiAsr(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::say::Speech,::say::Speech>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderWriterFactory< ::say::Speech,::say::Speech>::Create(stub_->channel_.get(), stub_->rpcmethod_BiAsr_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::say::Speech, ::say::Speech>* TextToSpeech::Stub::AsyncBiAsrRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderWriterFactory< ::say::Speech, ::say::Speech>::Create(channel_.get(), cq, rpcmethod_BiAsr_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::say::Speech, ::say::Speech>* TextToSpeech::Stub::PrepareAsyncBiAsrRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderWriterFactory< ::say::Speech, ::say::Speech>::Create(channel_.get(), cq, rpcmethod_BiAsr_, context, false, nullptr);
}

TextToSpeech::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TextToSpeech_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TextToSpeech::Service, ::say::Text, ::say::Speech>(
          [](TextToSpeech::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::say::Text* req,
             ::say::Speech* resp) {
               return service->Say(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TextToSpeech_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TextToSpeech::Service, ::say::AsrSpeech, ::say::Speech>(
          [](TextToSpeech::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::say::AsrSpeech* req,
             ::say::Speech* resp) {
               return service->Asr(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TextToSpeech_method_names[2],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< TextToSpeech::Service, ::say::Speech, ::say::Speech>(
          [](TextToSpeech::Service* service,
             ::grpc_impl::ServerContext* ctx,
             ::grpc_impl::ServerReaderWriter<::say::Speech,
             ::say::Speech>* stream) {
               return service->BiAsr(ctx, stream);
             }, this)));
}

TextToSpeech::Service::~Service() {
}

::grpc::Status TextToSpeech::Service::Say(::grpc::ServerContext* context, const ::say::Text* request, ::say::Speech* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TextToSpeech::Service::Asr(::grpc::ServerContext* context, const ::say::AsrSpeech* request, ::say::Speech* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TextToSpeech::Service::BiAsr(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::say::Speech, ::say::Speech>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace say

