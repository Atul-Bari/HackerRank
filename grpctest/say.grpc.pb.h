// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: say.proto
#ifndef GRPC_say_2eproto__INCLUDED
#define GRPC_say_2eproto__INCLUDED

#include "say.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace say {

class TextToSpeech final {
 public:
  static constexpr char const* service_full_name() {
    return "say.TextToSpeech";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // simple GRPC
    virtual ::grpc::Status Say(::grpc::ClientContext* context, const ::say::Text& request, ::say::Speech* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::say::Speech>> AsyncSay(::grpc::ClientContext* context, const ::say::Text& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::say::Speech>>(AsyncSayRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::say::Speech>> PrepareAsyncSay(::grpc::ClientContext* context, const ::say::Text& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::say::Speech>>(PrepareAsyncSayRaw(context, request, cq));
    }
    virtual ::grpc::Status Asr(::grpc::ClientContext* context, const ::say::AsrSpeech& request, ::say::Speech* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::say::Speech>> AsyncAsr(::grpc::ClientContext* context, const ::say::AsrSpeech& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::say::Speech>>(AsyncAsrRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::say::Speech>> PrepareAsyncAsr(::grpc::ClientContext* context, const ::say::AsrSpeech& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::say::Speech>>(PrepareAsyncAsrRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::say::Speech, ::say::Speech>> BiAsr(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::say::Speech, ::say::Speech>>(BiAsrRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::say::Speech, ::say::Speech>> AsyncBiAsr(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::say::Speech, ::say::Speech>>(AsyncBiAsrRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::say::Speech, ::say::Speech>> PrepareAsyncBiAsr(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::say::Speech, ::say::Speech>>(PrepareAsyncBiAsrRaw(context, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // simple GRPC
      virtual void Say(::grpc::ClientContext* context, const ::say::Text* request, ::say::Speech* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Say(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::say::Speech* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Say(::grpc::ClientContext* context, const ::say::Text* request, ::say::Speech* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Say(::grpc::ClientContext* context, const ::say::Text* request, ::say::Speech* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Say(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::say::Speech* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Say(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::say::Speech* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void Asr(::grpc::ClientContext* context, const ::say::AsrSpeech* request, ::say::Speech* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Asr(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::say::Speech* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Asr(::grpc::ClientContext* context, const ::say::AsrSpeech* request, ::say::Speech* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Asr(::grpc::ClientContext* context, const ::say::AsrSpeech* request, ::say::Speech* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Asr(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::say::Speech* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Asr(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::say::Speech* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void BiAsr(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::say::Speech,::say::Speech>* reactor) = 0;
      #else
      virtual void BiAsr(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::say::Speech,::say::Speech>* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::say::Speech>* AsyncSayRaw(::grpc::ClientContext* context, const ::say::Text& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::say::Speech>* PrepareAsyncSayRaw(::grpc::ClientContext* context, const ::say::Text& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::say::Speech>* AsyncAsrRaw(::grpc::ClientContext* context, const ::say::AsrSpeech& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::say::Speech>* PrepareAsyncAsrRaw(::grpc::ClientContext* context, const ::say::AsrSpeech& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::say::Speech, ::say::Speech>* BiAsrRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::say::Speech, ::say::Speech>* AsyncBiAsrRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::say::Speech, ::say::Speech>* PrepareAsyncBiAsrRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Say(::grpc::ClientContext* context, const ::say::Text& request, ::say::Speech* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::say::Speech>> AsyncSay(::grpc::ClientContext* context, const ::say::Text& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::say::Speech>>(AsyncSayRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::say::Speech>> PrepareAsyncSay(::grpc::ClientContext* context, const ::say::Text& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::say::Speech>>(PrepareAsyncSayRaw(context, request, cq));
    }
    ::grpc::Status Asr(::grpc::ClientContext* context, const ::say::AsrSpeech& request, ::say::Speech* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::say::Speech>> AsyncAsr(::grpc::ClientContext* context, const ::say::AsrSpeech& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::say::Speech>>(AsyncAsrRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::say::Speech>> PrepareAsyncAsr(::grpc::ClientContext* context, const ::say::AsrSpeech& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::say::Speech>>(PrepareAsyncAsrRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::say::Speech, ::say::Speech>> BiAsr(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::say::Speech, ::say::Speech>>(BiAsrRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::say::Speech, ::say::Speech>> AsyncBiAsr(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::say::Speech, ::say::Speech>>(AsyncBiAsrRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::say::Speech, ::say::Speech>> PrepareAsyncBiAsr(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::say::Speech, ::say::Speech>>(PrepareAsyncBiAsrRaw(context, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Say(::grpc::ClientContext* context, const ::say::Text* request, ::say::Speech* response, std::function<void(::grpc::Status)>) override;
      void Say(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::say::Speech* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Say(::grpc::ClientContext* context, const ::say::Text* request, ::say::Speech* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Say(::grpc::ClientContext* context, const ::say::Text* request, ::say::Speech* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Say(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::say::Speech* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Say(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::say::Speech* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Asr(::grpc::ClientContext* context, const ::say::AsrSpeech* request, ::say::Speech* response, std::function<void(::grpc::Status)>) override;
      void Asr(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::say::Speech* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Asr(::grpc::ClientContext* context, const ::say::AsrSpeech* request, ::say::Speech* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Asr(::grpc::ClientContext* context, const ::say::AsrSpeech* request, ::say::Speech* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Asr(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::say::Speech* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Asr(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::say::Speech* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void BiAsr(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::say::Speech,::say::Speech>* reactor) override;
      #else
      void BiAsr(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::say::Speech,::say::Speech>* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::say::Speech>* AsyncSayRaw(::grpc::ClientContext* context, const ::say::Text& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::say::Speech>* PrepareAsyncSayRaw(::grpc::ClientContext* context, const ::say::Text& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::say::Speech>* AsyncAsrRaw(::grpc::ClientContext* context, const ::say::AsrSpeech& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::say::Speech>* PrepareAsyncAsrRaw(::grpc::ClientContext* context, const ::say::AsrSpeech& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::say::Speech, ::say::Speech>* BiAsrRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::say::Speech, ::say::Speech>* AsyncBiAsrRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::say::Speech, ::say::Speech>* PrepareAsyncBiAsrRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Say_;
    const ::grpc::internal::RpcMethod rpcmethod_Asr_;
    const ::grpc::internal::RpcMethod rpcmethod_BiAsr_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // simple GRPC
    virtual ::grpc::Status Say(::grpc::ServerContext* context, const ::say::Text* request, ::say::Speech* response);
    virtual ::grpc::Status Asr(::grpc::ServerContext* context, const ::say::AsrSpeech* request, ::say::Speech* response);
    virtual ::grpc::Status BiAsr(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::say::Speech, ::say::Speech>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_Say : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Say() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Say() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Say(::grpc::ServerContext* /*context*/, const ::say::Text* /*request*/, ::say::Speech* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSay(::grpc::ServerContext* context, ::say::Text* request, ::grpc::ServerAsyncResponseWriter< ::say::Speech>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Asr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Asr() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Asr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Asr(::grpc::ServerContext* /*context*/, const ::say::AsrSpeech* /*request*/, ::say::Speech* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAsr(::grpc::ServerContext* context, ::say::AsrSpeech* request, ::grpc::ServerAsyncResponseWriter< ::say::Speech>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_BiAsr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_BiAsr() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_BiAsr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BiAsr(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::say::Speech, ::say::Speech>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBiAsr(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::say::Speech, ::say::Speech>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(2, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Say<WithAsyncMethod_Asr<WithAsyncMethod_BiAsr<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Say : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Say() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::say::Text, ::say::Speech>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::say::Text* request, ::say::Speech* response) { return this->Say(context, request, response); }));}
    void SetMessageAllocatorFor_Say(
        ::grpc::experimental::MessageAllocator< ::say::Text, ::say::Speech>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::say::Text, ::say::Speech>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Say() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Say(::grpc::ServerContext* /*context*/, const ::say::Text* /*request*/, ::say::Speech* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Say(
      ::grpc::CallbackServerContext* /*context*/, const ::say::Text* /*request*/, ::say::Speech* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Say(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::say::Text* /*request*/, ::say::Speech* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Asr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Asr() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::say::AsrSpeech, ::say::Speech>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::say::AsrSpeech* request, ::say::Speech* response) { return this->Asr(context, request, response); }));}
    void SetMessageAllocatorFor_Asr(
        ::grpc::experimental::MessageAllocator< ::say::AsrSpeech, ::say::Speech>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::say::AsrSpeech, ::say::Speech>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Asr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Asr(::grpc::ServerContext* /*context*/, const ::say::AsrSpeech* /*request*/, ::say::Speech* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Asr(
      ::grpc::CallbackServerContext* /*context*/, const ::say::AsrSpeech* /*request*/, ::say::Speech* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Asr(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::say::AsrSpeech* /*request*/, ::say::Speech* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_BiAsr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_BiAsr() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackBidiHandler< ::say::Speech, ::say::Speech>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->BiAsr(context); }));
    }
    ~ExperimentalWithCallbackMethod_BiAsr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BiAsr(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::say::Speech, ::say::Speech>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::say::Speech, ::say::Speech>* BiAsr(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::say::Speech, ::say::Speech>* BiAsr(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_Say<ExperimentalWithCallbackMethod_Asr<ExperimentalWithCallbackMethod_BiAsr<Service > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_Say<ExperimentalWithCallbackMethod_Asr<ExperimentalWithCallbackMethod_BiAsr<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Say : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Say() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Say() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Say(::grpc::ServerContext* /*context*/, const ::say::Text* /*request*/, ::say::Speech* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Asr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Asr() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Asr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Asr(::grpc::ServerContext* /*context*/, const ::say::AsrSpeech* /*request*/, ::say::Speech* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_BiAsr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_BiAsr() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_BiAsr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BiAsr(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::say::Speech, ::say::Speech>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Say : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Say() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Say() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Say(::grpc::ServerContext* /*context*/, const ::say::Text* /*request*/, ::say::Speech* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSay(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Asr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Asr() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Asr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Asr(::grpc::ServerContext* /*context*/, const ::say::AsrSpeech* /*request*/, ::say::Speech* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAsr(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_BiAsr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_BiAsr() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_BiAsr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BiAsr(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::say::Speech, ::say::Speech>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBiAsr(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(2, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Say : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Say() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Say(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Say() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Say(::grpc::ServerContext* /*context*/, const ::say::Text* /*request*/, ::say::Speech* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Say(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Say(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Asr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Asr() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Asr(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Asr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Asr(::grpc::ServerContext* /*context*/, const ::say::AsrSpeech* /*request*/, ::say::Speech* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Asr(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Asr(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_BiAsr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_BiAsr() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->BiAsr(context); }));
    }
    ~ExperimentalWithRawCallbackMethod_BiAsr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BiAsr(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::say::Speech, ::say::Speech>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* BiAsr(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* BiAsr(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Say : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Say() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::say::Text, ::say::Speech>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::say::Text, ::say::Speech>* streamer) {
                       return this->StreamedSay(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Say() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Say(::grpc::ServerContext* /*context*/, const ::say::Text* /*request*/, ::say::Speech* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSay(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::say::Text,::say::Speech>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Asr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Asr() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::say::AsrSpeech, ::say::Speech>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::say::AsrSpeech, ::say::Speech>* streamer) {
                       return this->StreamedAsr(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Asr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Asr(::grpc::ServerContext* /*context*/, const ::say::AsrSpeech* /*request*/, ::say::Speech* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAsr(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::say::AsrSpeech,::say::Speech>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Say<WithStreamedUnaryMethod_Asr<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Say<WithStreamedUnaryMethod_Asr<Service > > StreamedService;
};

}  // namespace say


#endif  // GRPC_say_2eproto__INCLUDED
