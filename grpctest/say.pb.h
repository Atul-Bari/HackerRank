// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: say.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_say_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_say_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_say_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_say_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_say_2eproto;
namespace say {
class AsrSpeech;
class AsrSpeechDefaultTypeInternal;
extern AsrSpeechDefaultTypeInternal _AsrSpeech_default_instance_;
class Speech;
class SpeechDefaultTypeInternal;
extern SpeechDefaultTypeInternal _Speech_default_instance_;
class Text;
class TextDefaultTypeInternal;
extern TextDefaultTypeInternal _Text_default_instance_;
}  // namespace say
PROTOBUF_NAMESPACE_OPEN
template<> ::say::AsrSpeech* Arena::CreateMaybeMessage<::say::AsrSpeech>(Arena*);
template<> ::say::Speech* Arena::CreateMaybeMessage<::say::Speech>(Arena*);
template<> ::say::Text* Arena::CreateMaybeMessage<::say::Text>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace say {

// ===================================================================

class Text PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:say.Text) */ {
 public:
  inline Text() : Text(nullptr) {};
  virtual ~Text();

  Text(const Text& from);
  Text(Text&& from) noexcept
    : Text() {
    *this = ::std::move(from);
  }

  inline Text& operator=(const Text& from) {
    CopyFrom(from);
    return *this;
  }
  inline Text& operator=(Text&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Text& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Text* internal_default_instance() {
    return reinterpret_cast<const Text*>(
               &_Text_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Text& a, Text& b) {
    a.Swap(&b);
  }
  inline void Swap(Text* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Text* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Text* New() const final {
    return CreateMaybeMessage<Text>(nullptr);
  }

  Text* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Text>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Text& from);
  void MergeFrom(const Text& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Text* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "say.Text";
  }
  protected:
  explicit Text(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_say_2eproto);
    return ::descriptor_table_say_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 1,
    kVoiceNameFieldNumber = 2,
  };
  // string text = 1;
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_text();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_text(
      std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // string voiceName = 2;
  void clear_voicename();
  const std::string& voicename() const;
  void set_voicename(const std::string& value);
  void set_voicename(std::string&& value);
  void set_voicename(const char* value);
  void set_voicename(const char* value, size_t size);
  std::string* mutable_voicename();
  std::string* release_voicename();
  void set_allocated_voicename(std::string* voicename);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_voicename();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_voicename(
      std::string* voicename);
  private:
  const std::string& _internal_voicename() const;
  void _internal_set_voicename(const std::string& value);
  std::string* _internal_mutable_voicename();
  public:

  // @@protoc_insertion_point(class_scope:say.Text)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr voicename_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_say_2eproto;
};
// -------------------------------------------------------------------

class Speech PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:say.Speech) */ {
 public:
  inline Speech() : Speech(nullptr) {};
  virtual ~Speech();

  Speech(const Speech& from);
  Speech(Speech&& from) noexcept
    : Speech() {
    *this = ::std::move(from);
  }

  inline Speech& operator=(const Speech& from) {
    CopyFrom(from);
    return *this;
  }
  inline Speech& operator=(Speech&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Speech& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Speech* internal_default_instance() {
    return reinterpret_cast<const Speech*>(
               &_Speech_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Speech& a, Speech& b) {
    a.Swap(&b);
  }
  inline void Swap(Speech* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Speech* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Speech* New() const final {
    return CreateMaybeMessage<Speech>(nullptr);
  }

  Speech* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Speech>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Speech& from);
  void MergeFrom(const Speech& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Speech* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "say.Speech";
  }
  protected:
  explicit Speech(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_say_2eproto);
    return ::descriptor_table_say_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAudioFieldNumber = 1,
  };
  // bytes audio = 1;
  void clear_audio();
  const std::string& audio() const;
  void set_audio(const std::string& value);
  void set_audio(std::string&& value);
  void set_audio(const char* value);
  void set_audio(const void* value, size_t size);
  std::string* mutable_audio();
  std::string* release_audio();
  void set_allocated_audio(std::string* audio);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_audio();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_audio(
      std::string* audio);
  private:
  const std::string& _internal_audio() const;
  void _internal_set_audio(const std::string& value);
  std::string* _internal_mutable_audio();
  public:

  // @@protoc_insertion_point(class_scope:say.Speech)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr audio_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_say_2eproto;
};
// -------------------------------------------------------------------

class AsrSpeech PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:say.AsrSpeech) */ {
 public:
  inline AsrSpeech() : AsrSpeech(nullptr) {};
  virtual ~AsrSpeech();

  AsrSpeech(const AsrSpeech& from);
  AsrSpeech(AsrSpeech&& from) noexcept
    : AsrSpeech() {
    *this = ::std::move(from);
  }

  inline AsrSpeech& operator=(const AsrSpeech& from) {
    CopyFrom(from);
    return *this;
  }
  inline AsrSpeech& operator=(AsrSpeech&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AsrSpeech& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AsrSpeech* internal_default_instance() {
    return reinterpret_cast<const AsrSpeech*>(
               &_AsrSpeech_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AsrSpeech& a, AsrSpeech& b) {
    a.Swap(&b);
  }
  inline void Swap(AsrSpeech* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AsrSpeech* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AsrSpeech* New() const final {
    return CreateMaybeMessage<AsrSpeech>(nullptr);
  }

  AsrSpeech* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AsrSpeech>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AsrSpeech& from);
  void MergeFrom(const AsrSpeech& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AsrSpeech* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "say.AsrSpeech";
  }
  protected:
  explicit AsrSpeech(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_say_2eproto);
    return ::descriptor_table_say_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAudioFieldNumber = 1,
    kModelFieldNumber = 2,
  };
  // bytes audio = 1;
  void clear_audio();
  const std::string& audio() const;
  void set_audio(const std::string& value);
  void set_audio(std::string&& value);
  void set_audio(const char* value);
  void set_audio(const void* value, size_t size);
  std::string* mutable_audio();
  std::string* release_audio();
  void set_allocated_audio(std::string* audio);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_audio();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_audio(
      std::string* audio);
  private:
  const std::string& _internal_audio() const;
  void _internal_set_audio(const std::string& value);
  std::string* _internal_mutable_audio();
  public:

  // string model = 2;
  void clear_model();
  const std::string& model() const;
  void set_model(const std::string& value);
  void set_model(std::string&& value);
  void set_model(const char* value);
  void set_model(const char* value, size_t size);
  std::string* mutable_model();
  std::string* release_model();
  void set_allocated_model(std::string* model);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_model();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_model(
      std::string* model);
  private:
  const std::string& _internal_model() const;
  void _internal_set_model(const std::string& value);
  std::string* _internal_mutable_model();
  public:

  // @@protoc_insertion_point(class_scope:say.AsrSpeech)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr audio_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_say_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Text

// string text = 1;
inline void Text::clear_text() {
  text_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Text::text() const {
  // @@protoc_insertion_point(field_get:say.Text.text)
  return _internal_text();
}
inline void Text::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:say.Text.text)
}
inline std::string* Text::mutable_text() {
  // @@protoc_insertion_point(field_mutable:say.Text.text)
  return _internal_mutable_text();
}
inline const std::string& Text::_internal_text() const {
  return text_.Get();
}
inline void Text::_internal_set_text(const std::string& value) {
  
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Text::set_text(std::string&& value) {
  
  text_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:say.Text.text)
}
inline void Text::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:say.Text.text)
}
inline void Text::set_text(const char* value,
    size_t size) {
  
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:say.Text.text)
}
inline std::string* Text::_internal_mutable_text() {
  
  return text_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Text::release_text() {
  // @@protoc_insertion_point(field_release:say.Text.text)
  
  return text_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Text::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:say.Text.text)
}
inline std::string* Text::unsafe_arena_release_text() {
  // @@protoc_insertion_point(field_unsafe_arena_release:say.Text.text)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return text_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Text::unsafe_arena_set_allocated_text(
    std::string* text) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (text != nullptr) {
    
  } else {
    
  }
  text_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      text, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:say.Text.text)
}

// string voiceName = 2;
inline void Text::clear_voicename() {
  voicename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Text::voicename() const {
  // @@protoc_insertion_point(field_get:say.Text.voiceName)
  return _internal_voicename();
}
inline void Text::set_voicename(const std::string& value) {
  _internal_set_voicename(value);
  // @@protoc_insertion_point(field_set:say.Text.voiceName)
}
inline std::string* Text::mutable_voicename() {
  // @@protoc_insertion_point(field_mutable:say.Text.voiceName)
  return _internal_mutable_voicename();
}
inline const std::string& Text::_internal_voicename() const {
  return voicename_.Get();
}
inline void Text::_internal_set_voicename(const std::string& value) {
  
  voicename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Text::set_voicename(std::string&& value) {
  
  voicename_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:say.Text.voiceName)
}
inline void Text::set_voicename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  voicename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:say.Text.voiceName)
}
inline void Text::set_voicename(const char* value,
    size_t size) {
  
  voicename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:say.Text.voiceName)
}
inline std::string* Text::_internal_mutable_voicename() {
  
  return voicename_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Text::release_voicename() {
  // @@protoc_insertion_point(field_release:say.Text.voiceName)
  
  return voicename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Text::set_allocated_voicename(std::string* voicename) {
  if (voicename != nullptr) {
    
  } else {
    
  }
  voicename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), voicename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:say.Text.voiceName)
}
inline std::string* Text::unsafe_arena_release_voicename() {
  // @@protoc_insertion_point(field_unsafe_arena_release:say.Text.voiceName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return voicename_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Text::unsafe_arena_set_allocated_voicename(
    std::string* voicename) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (voicename != nullptr) {
    
  } else {
    
  }
  voicename_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      voicename, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:say.Text.voiceName)
}

// -------------------------------------------------------------------

// Speech

// bytes audio = 1;
inline void Speech::clear_audio() {
  audio_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Speech::audio() const {
  // @@protoc_insertion_point(field_get:say.Speech.audio)
  return _internal_audio();
}
inline void Speech::set_audio(const std::string& value) {
  _internal_set_audio(value);
  // @@protoc_insertion_point(field_set:say.Speech.audio)
}
inline std::string* Speech::mutable_audio() {
  // @@protoc_insertion_point(field_mutable:say.Speech.audio)
  return _internal_mutable_audio();
}
inline const std::string& Speech::_internal_audio() const {
  return audio_.Get();
}
inline void Speech::_internal_set_audio(const std::string& value) {
  
  audio_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Speech::set_audio(std::string&& value) {
  
  audio_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:say.Speech.audio)
}
inline void Speech::set_audio(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  audio_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:say.Speech.audio)
}
inline void Speech::set_audio(const void* value,
    size_t size) {
  
  audio_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:say.Speech.audio)
}
inline std::string* Speech::_internal_mutable_audio() {
  
  return audio_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Speech::release_audio() {
  // @@protoc_insertion_point(field_release:say.Speech.audio)
  
  return audio_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Speech::set_allocated_audio(std::string* audio) {
  if (audio != nullptr) {
    
  } else {
    
  }
  audio_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), audio,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:say.Speech.audio)
}
inline std::string* Speech::unsafe_arena_release_audio() {
  // @@protoc_insertion_point(field_unsafe_arena_release:say.Speech.audio)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return audio_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Speech::unsafe_arena_set_allocated_audio(
    std::string* audio) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (audio != nullptr) {
    
  } else {
    
  }
  audio_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      audio, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:say.Speech.audio)
}

// -------------------------------------------------------------------

// AsrSpeech

// bytes audio = 1;
inline void AsrSpeech::clear_audio() {
  audio_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AsrSpeech::audio() const {
  // @@protoc_insertion_point(field_get:say.AsrSpeech.audio)
  return _internal_audio();
}
inline void AsrSpeech::set_audio(const std::string& value) {
  _internal_set_audio(value);
  // @@protoc_insertion_point(field_set:say.AsrSpeech.audio)
}
inline std::string* AsrSpeech::mutable_audio() {
  // @@protoc_insertion_point(field_mutable:say.AsrSpeech.audio)
  return _internal_mutable_audio();
}
inline const std::string& AsrSpeech::_internal_audio() const {
  return audio_.Get();
}
inline void AsrSpeech::_internal_set_audio(const std::string& value) {
  
  audio_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AsrSpeech::set_audio(std::string&& value) {
  
  audio_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:say.AsrSpeech.audio)
}
inline void AsrSpeech::set_audio(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  audio_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:say.AsrSpeech.audio)
}
inline void AsrSpeech::set_audio(const void* value,
    size_t size) {
  
  audio_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:say.AsrSpeech.audio)
}
inline std::string* AsrSpeech::_internal_mutable_audio() {
  
  return audio_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AsrSpeech::release_audio() {
  // @@protoc_insertion_point(field_release:say.AsrSpeech.audio)
  
  return audio_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AsrSpeech::set_allocated_audio(std::string* audio) {
  if (audio != nullptr) {
    
  } else {
    
  }
  audio_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), audio,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:say.AsrSpeech.audio)
}
inline std::string* AsrSpeech::unsafe_arena_release_audio() {
  // @@protoc_insertion_point(field_unsafe_arena_release:say.AsrSpeech.audio)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return audio_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AsrSpeech::unsafe_arena_set_allocated_audio(
    std::string* audio) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (audio != nullptr) {
    
  } else {
    
  }
  audio_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      audio, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:say.AsrSpeech.audio)
}

// string model = 2;
inline void AsrSpeech::clear_model() {
  model_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AsrSpeech::model() const {
  // @@protoc_insertion_point(field_get:say.AsrSpeech.model)
  return _internal_model();
}
inline void AsrSpeech::set_model(const std::string& value) {
  _internal_set_model(value);
  // @@protoc_insertion_point(field_set:say.AsrSpeech.model)
}
inline std::string* AsrSpeech::mutable_model() {
  // @@protoc_insertion_point(field_mutable:say.AsrSpeech.model)
  return _internal_mutable_model();
}
inline const std::string& AsrSpeech::_internal_model() const {
  return model_.Get();
}
inline void AsrSpeech::_internal_set_model(const std::string& value) {
  
  model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AsrSpeech::set_model(std::string&& value) {
  
  model_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:say.AsrSpeech.model)
}
inline void AsrSpeech::set_model(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:say.AsrSpeech.model)
}
inline void AsrSpeech::set_model(const char* value,
    size_t size) {
  
  model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:say.AsrSpeech.model)
}
inline std::string* AsrSpeech::_internal_mutable_model() {
  
  return model_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AsrSpeech::release_model() {
  // @@protoc_insertion_point(field_release:say.AsrSpeech.model)
  
  return model_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AsrSpeech::set_allocated_model(std::string* model) {
  if (model != nullptr) {
    
  } else {
    
  }
  model_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:say.AsrSpeech.model)
}
inline std::string* AsrSpeech::unsafe_arena_release_model() {
  // @@protoc_insertion_point(field_unsafe_arena_release:say.AsrSpeech.model)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return model_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AsrSpeech::unsafe_arena_set_allocated_model(
    std::string* model) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (model != nullptr) {
    
  } else {
    
  }
  model_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      model, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:say.AsrSpeech.model)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace say

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_say_2eproto
