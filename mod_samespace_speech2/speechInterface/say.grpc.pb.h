// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: say.proto
#ifndef GRPC_say_2eproto__INCLUDED
#define GRPC_say_2eproto__INCLUDED

#include "say.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace say {

class TextToSpeech final {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // simple GRPC
    virtual ::grpc::Status Say(::grpc::ClientContext* context, const ::say::Text& request, ::say::Speech* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::say::Speech>> AsyncSay(::grpc::ClientContext* context, const ::say::Text& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::say::Speech>>(AsyncSayRaw(context, request, cq));
    }
    virtual ::grpc::Status Asr(::grpc::ClientContext* context, const ::say::AsrSpeech& request, ::say::Speech* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::say::Speech>> AsyncAsr(::grpc::ClientContext* context, const ::say::AsrSpeech& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::say::Speech>>(AsyncAsrRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::say::Speech, ::say::Speech>> BiAsr(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::say::Speech, ::say::Speech>>(BiAsrRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::say::Speech, ::say::Speech>> AsyncBiAsr(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::say::Speech, ::say::Speech>>(AsyncBiAsrRaw(context, cq, tag));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::say::Speech>* AsyncSayRaw(::grpc::ClientContext* context, const ::say::Text& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::say::Speech>* AsyncAsrRaw(::grpc::ClientContext* context, const ::say::AsrSpeech& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::say::Speech, ::say::Speech>* BiAsrRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::say::Speech, ::say::Speech>* AsyncBiAsrRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Say(::grpc::ClientContext* context, const ::say::Text& request, ::say::Speech* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::say::Speech>> AsyncSay(::grpc::ClientContext* context, const ::say::Text& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::say::Speech>>(AsyncSayRaw(context, request, cq));
    }
    ::grpc::Status Asr(::grpc::ClientContext* context, const ::say::AsrSpeech& request, ::say::Speech* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::say::Speech>> AsyncAsr(::grpc::ClientContext* context, const ::say::AsrSpeech& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::say::Speech>>(AsyncAsrRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::say::Speech, ::say::Speech>> BiAsr(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::say::Speech, ::say::Speech>>(BiAsrRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::say::Speech, ::say::Speech>> AsyncBiAsr(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::say::Speech, ::say::Speech>>(AsyncBiAsrRaw(context, cq, tag));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::say::Speech>* AsyncSayRaw(::grpc::ClientContext* context, const ::say::Text& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::say::Speech>* AsyncAsrRaw(::grpc::ClientContext* context, const ::say::AsrSpeech& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::say::Speech, ::say::Speech>* BiAsrRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::say::Speech, ::say::Speech>* AsyncBiAsrRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    const ::grpc::RpcMethod rpcmethod_Say_;
    const ::grpc::RpcMethod rpcmethod_Asr_;
    const ::grpc::RpcMethod rpcmethod_BiAsr_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // simple GRPC
    virtual ::grpc::Status Say(::grpc::ServerContext* context, const ::say::Text* request, ::say::Speech* response);
    virtual ::grpc::Status Asr(::grpc::ServerContext* context, const ::say::AsrSpeech* request, ::say::Speech* response);
    virtual ::grpc::Status BiAsr(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::say::Speech, ::say::Speech>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_Say : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Say() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Say() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Say(::grpc::ServerContext* context, const ::say::Text* request, ::say::Speech* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSay(::grpc::ServerContext* context, ::say::Text* request, ::grpc::ServerAsyncResponseWriter< ::say::Speech>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Asr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Asr() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Asr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Asr(::grpc::ServerContext* context, const ::say::AsrSpeech* request, ::say::Speech* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAsr(::grpc::ServerContext* context, ::say::AsrSpeech* request, ::grpc::ServerAsyncResponseWriter< ::say::Speech>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_BiAsr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_BiAsr() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_BiAsr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BiAsr(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::say::Speech, ::say::Speech>* stream) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBiAsr(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::say::Speech, ::say::Speech>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(2, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Say<WithAsyncMethod_Asr<WithAsyncMethod_BiAsr<Service > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_Say : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Say() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Say() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Say(::grpc::ServerContext* context, const ::say::Text* request, ::say::Speech* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Asr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Asr() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Asr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Asr(::grpc::ServerContext* context, const ::say::AsrSpeech* request, ::say::Speech* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_BiAsr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_BiAsr() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_BiAsr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BiAsr(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::say::Speech, ::say::Speech>* stream) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Say : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Say() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::StreamedUnaryHandler< ::say::Text, ::say::Speech>(std::bind(&WithStreamedUnaryMethod_Say<BaseClass>::StreamedSay, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Say() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Say(::grpc::ServerContext* context, const ::say::Text* request, ::say::Speech* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSay(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::say::Text,::say::Speech>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Asr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Asr() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::StreamedUnaryHandler< ::say::AsrSpeech, ::say::Speech>(std::bind(&WithStreamedUnaryMethod_Asr<BaseClass>::StreamedAsr, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Asr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Asr(::grpc::ServerContext* context, const ::say::AsrSpeech* request, ::say::Speech* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAsr(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::say::AsrSpeech,::say::Speech>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Say<WithStreamedUnaryMethod_Asr<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Say<WithStreamedUnaryMethod_Asr<Service > > StreamedService;
};

}  // namespace say


#endif  // GRPC_say_2eproto__INCLUDED
