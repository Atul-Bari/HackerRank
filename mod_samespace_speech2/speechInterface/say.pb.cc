// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: say.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "say.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace say {

namespace {

const ::google::protobuf::Descriptor* Text_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Text_reflection_ = NULL;
const ::google::protobuf::Descriptor* Speech_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Speech_reflection_ = NULL;
const ::google::protobuf::Descriptor* AsrSpeech_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AsrSpeech_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_say_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_say_2eproto() {
  protobuf_AddDesc_say_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "say.proto");
  GOOGLE_CHECK(file != NULL);
  Text_descriptor_ = file->message_type(0);
  static const int Text_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Text, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Text, voicename_),
  };
  Text_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Text_descriptor_,
      Text::default_instance_,
      Text_offsets_,
      -1,
      -1,
      -1,
      sizeof(Text),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Text, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Text, _is_default_instance_));
  Speech_descriptor_ = file->message_type(1);
  static const int Speech_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Speech, audio_),
  };
  Speech_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Speech_descriptor_,
      Speech::default_instance_,
      Speech_offsets_,
      -1,
      -1,
      -1,
      sizeof(Speech),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Speech, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Speech, _is_default_instance_));
  AsrSpeech_descriptor_ = file->message_type(2);
  static const int AsrSpeech_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AsrSpeech, audio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AsrSpeech, model_),
  };
  AsrSpeech_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AsrSpeech_descriptor_,
      AsrSpeech::default_instance_,
      AsrSpeech_offsets_,
      -1,
      -1,
      -1,
      sizeof(AsrSpeech),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AsrSpeech, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AsrSpeech, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_say_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Text_descriptor_, &Text::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Speech_descriptor_, &Speech::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AsrSpeech_descriptor_, &AsrSpeech::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_say_2eproto() {
  delete Text::default_instance_;
  delete Text_reflection_;
  delete Speech::default_instance_;
  delete Speech_reflection_;
  delete AsrSpeech::default_instance_;
  delete AsrSpeech_reflection_;
}

void protobuf_AddDesc_say_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_say_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tsay.proto\022\003say\"\'\n\004Text\022\014\n\004text\030\001 \001(\t\022\021"
    "\n\tvoiceName\030\002 \001(\t\"\027\n\006Speech\022\r\n\005audio\030\001 \001"
    "(\014\")\n\tAsrSpeech\022\r\n\005audio\030\001 \001(\014\022\r\n\005model\030"
    "\002 \001(\t2~\n\014TextToSpeech\022\037\n\003Say\022\t.say.Text\032"
    "\013.say.Speech\"\000\022$\n\003Asr\022\016.say.AsrSpeech\032\013."
    "say.Speech\"\000\022\'\n\005BiAsr\022\013.say.Speech\032\013.say"
    ".Speech\"\000(\0010\001b\006proto3", 261);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "say.proto", &protobuf_RegisterTypes);
  Text::default_instance_ = new Text();
  Speech::default_instance_ = new Speech();
  AsrSpeech::default_instance_ = new AsrSpeech();
  Text::default_instance_->InitAsDefaultInstance();
  Speech::default_instance_->InitAsDefaultInstance();
  AsrSpeech::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_say_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_say_2eproto {
  StaticDescriptorInitializer_say_2eproto() {
    protobuf_AddDesc_say_2eproto();
  }
} static_descriptor_initializer_say_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Text::kTextFieldNumber;
const int Text::kVoiceNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Text::Text()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:say.Text)
}

void Text::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Text::Text(const Text& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:say.Text)
}

void Text::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  voicename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Text::~Text() {
  // @@protoc_insertion_point(destructor:say.Text)
  SharedDtor();
}

void Text::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  voicename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Text::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Text::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Text_descriptor_;
}

const Text& Text::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_say_2eproto();
  return *default_instance_;
}

Text* Text::default_instance_ = NULL;

Text* Text::New(::google::protobuf::Arena* arena) const {
  Text* n = new Text;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Text::Clear() {
// @@protoc_insertion_point(message_clear_start:say.Text)
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  voicename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Text::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:say.Text)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string text = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "say.Text.text"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_voiceName;
        break;
      }

      // optional string voiceName = 2;
      case 2: {
        if (tag == 18) {
         parse_voiceName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_voicename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->voicename().data(), this->voicename().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "say.Text.voiceName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:say.Text)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:say.Text)
  return false;
#undef DO_
}

void Text::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:say.Text)
  // optional string text = 1;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "say.Text.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->text(), output);
  }

  // optional string voiceName = 2;
  if (this->voicename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->voicename().data(), this->voicename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "say.Text.voiceName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->voicename(), output);
  }

  // @@protoc_insertion_point(serialize_end:say.Text)
}

::google::protobuf::uint8* Text::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:say.Text)
  // optional string text = 1;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "say.Text.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  // optional string voiceName = 2;
  if (this->voicename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->voicename().data(), this->voicename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "say.Text.voiceName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->voicename(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:say.Text)
  return target;
}

int Text::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:say.Text)
  int total_size = 0;

  // optional string text = 1;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }

  // optional string voiceName = 2;
  if (this->voicename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->voicename());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Text::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:say.Text)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Text* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Text>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:say.Text)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:say.Text)
    MergeFrom(*source);
  }
}

void Text::MergeFrom(const Text& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:say.Text)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.text().size() > 0) {

    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  if (from.voicename().size() > 0) {

    voicename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.voicename_);
  }
}

void Text::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:say.Text)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Text::CopyFrom(const Text& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:say.Text)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Text::IsInitialized() const {

  return true;
}

void Text::Swap(Text* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Text::InternalSwap(Text* other) {
  text_.Swap(&other->text_);
  voicename_.Swap(&other->voicename_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Text::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Text_descriptor_;
  metadata.reflection = Text_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Text

// optional string text = 1;
void Text::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Text::text() const {
  // @@protoc_insertion_point(field_get:say.Text.text)
  return text_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Text::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:say.Text.text)
}
 void Text::set_text(const char* value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:say.Text.text)
}
 void Text::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:say.Text.text)
}
 ::std::string* Text::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:say.Text.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Text::release_text() {
  // @@protoc_insertion_point(field_release:say.Text.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Text::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:say.Text.text)
}

// optional string voiceName = 2;
void Text::clear_voicename() {
  voicename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Text::voicename() const {
  // @@protoc_insertion_point(field_get:say.Text.voiceName)
  return voicename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Text::set_voicename(const ::std::string& value) {
  
  voicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:say.Text.voiceName)
}
 void Text::set_voicename(const char* value) {
  
  voicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:say.Text.voiceName)
}
 void Text::set_voicename(const char* value, size_t size) {
  
  voicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:say.Text.voiceName)
}
 ::std::string* Text::mutable_voicename() {
  
  // @@protoc_insertion_point(field_mutable:say.Text.voiceName)
  return voicename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Text::release_voicename() {
  // @@protoc_insertion_point(field_release:say.Text.voiceName)
  
  return voicename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Text::set_allocated_voicename(::std::string* voicename) {
  if (voicename != NULL) {
    
  } else {
    
  }
  voicename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), voicename);
  // @@protoc_insertion_point(field_set_allocated:say.Text.voiceName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Speech::kAudioFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Speech::Speech()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:say.Speech)
}

void Speech::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Speech::Speech(const Speech& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:say.Speech)
}

void Speech::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  audio_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Speech::~Speech() {
  // @@protoc_insertion_point(destructor:say.Speech)
  SharedDtor();
}

void Speech::SharedDtor() {
  audio_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Speech::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Speech::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Speech_descriptor_;
}

const Speech& Speech::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_say_2eproto();
  return *default_instance_;
}

Speech* Speech::default_instance_ = NULL;

Speech* Speech::New(::google::protobuf::Arena* arena) const {
  Speech* n = new Speech;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Speech::Clear() {
// @@protoc_insertion_point(message_clear_start:say.Speech)
  audio_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Speech::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:say.Speech)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes audio = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_audio()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:say.Speech)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:say.Speech)
  return false;
#undef DO_
}

void Speech::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:say.Speech)
  // optional bytes audio = 1;
  if (this->audio().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->audio(), output);
  }

  // @@protoc_insertion_point(serialize_end:say.Speech)
}

::google::protobuf::uint8* Speech::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:say.Speech)
  // optional bytes audio = 1;
  if (this->audio().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->audio(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:say.Speech)
  return target;
}

int Speech::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:say.Speech)
  int total_size = 0;

  // optional bytes audio = 1;
  if (this->audio().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->audio());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Speech::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:say.Speech)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Speech* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Speech>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:say.Speech)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:say.Speech)
    MergeFrom(*source);
  }
}

void Speech::MergeFrom(const Speech& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:say.Speech)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.audio().size() > 0) {

    audio_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.audio_);
  }
}

void Speech::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:say.Speech)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Speech::CopyFrom(const Speech& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:say.Speech)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Speech::IsInitialized() const {

  return true;
}

void Speech::Swap(Speech* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Speech::InternalSwap(Speech* other) {
  audio_.Swap(&other->audio_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Speech::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Speech_descriptor_;
  metadata.reflection = Speech_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Speech

// optional bytes audio = 1;
void Speech::clear_audio() {
  audio_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Speech::audio() const {
  // @@protoc_insertion_point(field_get:say.Speech.audio)
  return audio_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Speech::set_audio(const ::std::string& value) {
  
  audio_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:say.Speech.audio)
}
 void Speech::set_audio(const char* value) {
  
  audio_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:say.Speech.audio)
}
 void Speech::set_audio(const void* value, size_t size) {
  
  audio_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:say.Speech.audio)
}
 ::std::string* Speech::mutable_audio() {
  
  // @@protoc_insertion_point(field_mutable:say.Speech.audio)
  return audio_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Speech::release_audio() {
  // @@protoc_insertion_point(field_release:say.Speech.audio)
  
  return audio_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Speech::set_allocated_audio(::std::string* audio) {
  if (audio != NULL) {
    
  } else {
    
  }
  audio_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), audio);
  // @@protoc_insertion_point(field_set_allocated:say.Speech.audio)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AsrSpeech::kAudioFieldNumber;
const int AsrSpeech::kModelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AsrSpeech::AsrSpeech()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:say.AsrSpeech)
}

void AsrSpeech::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

AsrSpeech::AsrSpeech(const AsrSpeech& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:say.AsrSpeech)
}

void AsrSpeech::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  audio_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

AsrSpeech::~AsrSpeech() {
  // @@protoc_insertion_point(destructor:say.AsrSpeech)
  SharedDtor();
}

void AsrSpeech::SharedDtor() {
  audio_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void AsrSpeech::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AsrSpeech::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AsrSpeech_descriptor_;
}

const AsrSpeech& AsrSpeech::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_say_2eproto();
  return *default_instance_;
}

AsrSpeech* AsrSpeech::default_instance_ = NULL;

AsrSpeech* AsrSpeech::New(::google::protobuf::Arena* arena) const {
  AsrSpeech* n = new AsrSpeech;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AsrSpeech::Clear() {
// @@protoc_insertion_point(message_clear_start:say.AsrSpeech)
  audio_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AsrSpeech::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:say.AsrSpeech)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes audio = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_audio()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_model;
        break;
      }

      // optional string model = 2;
      case 2: {
        if (tag == 18) {
         parse_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->model().data(), this->model().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "say.AsrSpeech.model"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:say.AsrSpeech)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:say.AsrSpeech)
  return false;
#undef DO_
}

void AsrSpeech::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:say.AsrSpeech)
  // optional bytes audio = 1;
  if (this->audio().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->audio(), output);
  }

  // optional string model = 2;
  if (this->model().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "say.AsrSpeech.model");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->model(), output);
  }

  // @@protoc_insertion_point(serialize_end:say.AsrSpeech)
}

::google::protobuf::uint8* AsrSpeech::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:say.AsrSpeech)
  // optional bytes audio = 1;
  if (this->audio().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->audio(), target);
  }

  // optional string model = 2;
  if (this->model().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "say.AsrSpeech.model");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->model(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:say.AsrSpeech)
  return target;
}

int AsrSpeech::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:say.AsrSpeech)
  int total_size = 0;

  // optional bytes audio = 1;
  if (this->audio().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->audio());
  }

  // optional string model = 2;
  if (this->model().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AsrSpeech::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:say.AsrSpeech)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AsrSpeech* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AsrSpeech>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:say.AsrSpeech)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:say.AsrSpeech)
    MergeFrom(*source);
  }
}

void AsrSpeech::MergeFrom(const AsrSpeech& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:say.AsrSpeech)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.audio().size() > 0) {

    audio_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.audio_);
  }
  if (from.model().size() > 0) {

    model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_);
  }
}

void AsrSpeech::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:say.AsrSpeech)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AsrSpeech::CopyFrom(const AsrSpeech& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:say.AsrSpeech)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AsrSpeech::IsInitialized() const {

  return true;
}

void AsrSpeech::Swap(AsrSpeech* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AsrSpeech::InternalSwap(AsrSpeech* other) {
  audio_.Swap(&other->audio_);
  model_.Swap(&other->model_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AsrSpeech::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AsrSpeech_descriptor_;
  metadata.reflection = AsrSpeech_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AsrSpeech

// optional bytes audio = 1;
void AsrSpeech::clear_audio() {
  audio_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& AsrSpeech::audio() const {
  // @@protoc_insertion_point(field_get:say.AsrSpeech.audio)
  return audio_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AsrSpeech::set_audio(const ::std::string& value) {
  
  audio_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:say.AsrSpeech.audio)
}
 void AsrSpeech::set_audio(const char* value) {
  
  audio_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:say.AsrSpeech.audio)
}
 void AsrSpeech::set_audio(const void* value, size_t size) {
  
  audio_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:say.AsrSpeech.audio)
}
 ::std::string* AsrSpeech::mutable_audio() {
  
  // @@protoc_insertion_point(field_mutable:say.AsrSpeech.audio)
  return audio_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AsrSpeech::release_audio() {
  // @@protoc_insertion_point(field_release:say.AsrSpeech.audio)
  
  return audio_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AsrSpeech::set_allocated_audio(::std::string* audio) {
  if (audio != NULL) {
    
  } else {
    
  }
  audio_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), audio);
  // @@protoc_insertion_point(field_set_allocated:say.AsrSpeech.audio)
}

// optional string model = 2;
void AsrSpeech::clear_model() {
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& AsrSpeech::model() const {
  // @@protoc_insertion_point(field_get:say.AsrSpeech.model)
  return model_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AsrSpeech::set_model(const ::std::string& value) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:say.AsrSpeech.model)
}
 void AsrSpeech::set_model(const char* value) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:say.AsrSpeech.model)
}
 void AsrSpeech::set_model(const char* value, size_t size) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:say.AsrSpeech.model)
}
 ::std::string* AsrSpeech::mutable_model() {
  
  // @@protoc_insertion_point(field_mutable:say.AsrSpeech.model)
  return model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AsrSpeech::release_model() {
  // @@protoc_insertion_point(field_release:say.AsrSpeech.model)
  
  return model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AsrSpeech::set_allocated_model(::std::string* model) {
  if (model != NULL) {
    
  } else {
    
  }
  model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model);
  // @@protoc_insertion_point(field_set_allocated:say.AsrSpeech.model)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace say

// @@protoc_insertion_point(global_scope)
